So in java, there are eight primitive types: 
Four of them are signed integer values: byte, short, int, long.
Two of them are for signed floating-point numbers: double, float.
One for characters (used for string encoding): char.
One for boolean values: boolean.

suffix and prefix:
Long has an 'L' suffix (4000000000L) 
Hexadecimal has an "0x" prefix (0xCAFEBABE)
Binary values have "0b" prefix (0b1001).
For "byte" and "short" there is no prefix/suffix and we can use casting.

int byteCasting = (byte)128;
System.out.println(s);

-128
Why? 
Each primitive type uses for a fixed amount of memory cells. 
Byte - 8 bits.
Short - 16 bits.
Int - 32 bits.
Long - 64 bits.
The first bit of any signed type represents whether the number is positive/negative.
So, how is 128 represented in binary?
...0000 10000000
First, 128 is stored in memory, and for this, the index which represents 2^7 is on. Then we "ask" to cast it as a byte and store it in a signed integer type; by doing this, we tell java to take a "snapshot" from the last eight bits: 10000000 - consider them as a byte and store it as an integer and -128 is then printed.
So, why 10000000 is -128: 
The first bit is the sign bit 0 for positive, and 1 for negative, and the other seven bits are the actual value representation.
So how is zero is represented: that is easy: 00000000.
We can take advantage of the same value with a negative sign: 10000000, and that is what we do - it is used for -128. 